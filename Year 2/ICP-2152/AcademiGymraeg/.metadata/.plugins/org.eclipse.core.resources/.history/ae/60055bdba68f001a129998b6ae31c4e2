package projectAG;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;

public class DatabaseManager {
	
	//InputStream stream;
	Connection conn;
	Statement st;
	private static String url;
    private static String username;
    private static String password;
    private List<String> nouns;

	
	public DatabaseManager() throws ClassNotFoundException, IOException, SQLException {
		// Initialise data source using properties file
		InputStream stream =
				DatabaseManager.class.getResourceAsStream("/database.properties");
		initialiseConnection(stream);
		conn = getConnection();
		st = conn.createStatement();
		nouns = new LinkedList<String>();
		for (Noun nu : retrieveNouns(st)) {
			nouns.add(nu.toString());
		}
	}
	
	public static void initialiseConnection(InputStream stream) throws IOException, ClassNotFoundException {
		Properties props = new Properties();
	      props.load(stream);

	      String driver = props.getProperty("jdbc.driver");
	      url = props.getProperty("jdbc.url");
	      username = props.getProperty("jdbc.username");
	      password = props.getProperty("jdbc.password");

	      Class.forName(driver);
	}
	
	public static Connection getConnection() throws SQLException {
	      return DriverManager.getConnection(url, 
	         username, password);
	   }
	
	private static List<Noun> retrieveNouns(Statement stmt) {
		List<Noun> toReturn = new LinkedList<Noun>();
		try {
			ResultSet results = stmt.executeQuery("SELECT * FROM Nouns");
			while (results.next()) {
				Noun nu = new Noun(results.getString("noun"),
								   results.getString("translation"),
								   results.getString("gender"));
				toReturn.add(nu);
			}
		} catch (SQLException e) {
		}
		return toReturn;		
	}
	
	
	
	public void updateEntry(String table, String key, String entryName, String entry) throws SQLException {
		for (Noun nu : retrieveNouns(st)) {
			
		}
		
		try
		{
			String command = "UPDATE " +table+ " SET "
					+ entryName + " = ";
			if (entryName.equals("credits")) { 
				command = command + Integer.parseInt(entry);
			} else {
				command = command + "\"" + entry + "\"";
			}
			command = command +" WHERE ";
			if (!table.equals("registration") && !table.equals("teaches"))  
				command = command + table;
			else if (table.equals("registration")) 
				command = command +"student";
			else if (table.equals("teaches"))
				command = command +"staff";
			command = command +"_id = \""+key+"\";";
			st.execute(command);
			//st.executeUpdate(sql);
		} finally {
			
		}
	}
	
	public void delFromTable(String table, String key) throws SQLException {
		try
		{
			String command = "DELETE FROM " +table+ " WHERE ";
			if (!table.equals("registration") && !table.equals("teaches")) 
				command = command + table;
			else if (table.equals("registration")) 
				command = command +"student";
			else if (table.equals("teaches"))
				command = command +"staff";
			command = command +"_id = \""+key+"\";";
			st.execute(command);
			//st.executeUpdate(sql);
		} finally {
			
		}
	}
	
	public void addToTable(String table, String par1, String par2, String par3) throws SQLException {
		try
		{
			String command = "INSERT INTO " + table;
			if (table.equals("student")) { 
				command = command +"("+table+"_id, "+table+"_name, degree_scheme)" + 
						"VALUE ('" +par1+ "', '" +par2+ "', '" +par3+ "');";
			} else if (table.equals("staff")){ 
				command = command +"("+table+"_id, "+table+"_name, staff_grade)" + 
						"VALUE ('" +par1+ "', '" +par2+ "', '" +par3+ "');";
			} else if (table.equals("module")) {
				command = command +"("+table+"_id, "+table+"_name, credits)" + 
						"VALUE ('" +par1+ "', '" +par2+ "', '" +Integer.parseInt(par3)+ "');";
			} else if (table.equals("registration")) {
				command = command +"(student_id, module_id)" + 
						"VALUE ('" +par1+ "', '" +par2+ "');";
			} else if (table.equals("teaches")) {
				command = command +"(staff_id, module_id)" + 
						"VALUE ('" +par1+ "', '" +par2+ "');";
			}
			st.execute(command);
			//st.executeUpdate(sql);
		} finally {
			
		}
	}
	
	public List<String> getTable() throws SQLException {
		List<String> toReturn = new LinkedList<String>();
		for (Noun nu : retrieveNouns(st)) {
			toReturn.add(nu.toString());
		}
		return toReturn;
	}
	
	public List<String> getEntryData(String noun) throws SQLException {
		List<String> toReturn = new LinkedList<String>();
		for (Noun nu : retrieveNouns(st, "WHERE noun = '"+noun+"'")) {
			toReturn.add(nu.toString());
		}
		return toReturn;
	}
	
}
